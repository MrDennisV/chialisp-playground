{
  "language": {
    "id": "chialisp",
    "configuration": {
      "brackets": [
        ["(", ")"],
        ["[", "]"],
        ["{", "}"]
      ],
      "autoClosingPairs": [
        { "open": "(", "close": ")" },
        { "open": "[", "close": "]" },
        { "open": "{", "close": "}" },
        { "open": "\"", "close": "\"" },
        { "open": "'", "close": "'" }
      ],
      "surroundingPairs": [
        { "open": "(", "close": ")" },
        { "open": "[", "close": "]" },
        { "open": "{", "close": "}" },
        { "open": "\"", "close": "\"" },
        { "open": "'", "close": "'" }
      ],
      "comments": {
        "lineComment": ";",
        "blockComment": [";;", ";;"]
      }
    },
    "tokenizer": {
      "root": [
        [";.*$", "comment"],
        ["\"([^\"\\\\]|\\\\.)*\"", "string"],
        ["\"", "string.invalid"],
        ["0[xX][0-9a-fA-F]+", "number.hex"],
        ["0[bB][01]+", "number.binary"], 
        ["\\d+\\.\\d+", "number.float"],
        ["\\d+", "number.integer"],
        ["\\b(mod|defun|defmacro|defun-inline|lambda|defconstant|if|list|not|i|x|qq|q|a|unquote)\\b", "keyword.core"],
        ["\\b(assign|let\\*|defmac|defconst|embed-file)\\b", "keyword.modern"],
        ["\\*standard-cl-2[1234]\\*", "keyword.pragma"],
        ["\\b(\\+|\\-|\\*|\\/|divmod|%|modpow|=|>|>s|all|any)\\b", "keyword.operator"],
        ["\\b(f|r|c|l|concat|strlen|substr|logand|logior|logxor|lognot|ash|lsh)\\b", "keyword.list"],
        ["\\b(pubkey_for_exp|g1_add|g1_subtract|g1_multiply|g1_negate|g2_add|g2_subtract|g2_multiply|g2_negate|g1_map|g2_map|bls_pairing_identity|bls_verify|sha256|keccak256|coinid|secp256k1_verify|secp256r1_verify)\\b", "keyword.crypto"],
        ["\\b(include|softfork|@)\\b", "keyword.control"],
        ["\\(", "delimiter.parenthesis"],
        ["\\)", "delimiter.parenthesis"],
        ["[a-zA-Z_][a-zA-Z0-9_-]*\\?", "identifier.predicate"], 
        ["[a-zA-Z_][a-zA-Z0-9_-]*!", "identifier.mutator"],    
        ["[a-zA-Z_][a-zA-Z0-9_-]*", "identifier"],
        ["\\s+", "white"]
      ]
    }
  },
  "hover": {
    "keywords": {
      "mod": "Define a ChiaLisp program. Takes arguments and returns a program.",
      "include": "Include external ChiaLisp file containing statements.",
      "defun": "Define a function with name, parameters, and body.",
      "defun-inline": "Define an inline function that gets expanded at compile time.",
      "lambda": "Create an anonymous function with args and body.",
      "defmacro": "Define a macro that transforms code at compile time.",
      "defconstant": "Define a constant with a value.",
      "defmac": "Define a modern macro that transforms code at compile time.",
      "defconst": "Define a constant with access to the program surrounding it at compile time.",
      "assign": "Create local variable bindings with destructuring assignment.",
      "let*": "Create local variable bindings where each binding can access previous ones.",
      "embed-file": "Include external file content at compile time.",
      "list": "Create a list from the given arguments.",
      "+": "Add multiple atoms.",
      "-": "Subtract multiple atoms.",
      "*": "Multiply multiple atoms.",
      "/": "Divide two atoms. Rounds towards negative infinity.",
      "divmod": "Calculate quotient and remainder in cons pair.",
      "%": "Compute remainder of numerator divided by denominator.",
      "modpow": "Compute (base ^ exponent) % modulus.",
      "=": "True if both atoms are equal.",
      ">": "True if the first atom is greater as a number.",
      ">s": "True if the first atom is greater as a string of bytes.",
      "not": "True if the atom is false.",
      "all": "True if all of the atoms are non-zero.",
      "any": "True if any of the atoms are non-zero.",
      "if": "If A is true, then B, otherwise C. Lazy evaluated.",
      "i": "If A is true, then B, otherwise C.",
      "x": "Terminate the program with zero or more values.",
      "qq": "Quote an expression except for anything inside unquote.",
      "unquote": "Unquote an expression nested within qq.",
      "q": "Treats A as a value rather than a program.",
      "a": "Evaluate value A as a program with value B as its environment.",
      "@": "Access value A from the environment.",
      "f": "First value in list A.",
      "r": "Rest of the values in list A.",
      "c": "Cons pair of A and B, or prepend A to list B.",
      "l": "True if A is a list, not nil. Can be used to check length.",
      "concat": "Concatenate the bytes of the atoms.",
      "strlen": "Return the length of the atom.",
      "substr": "Slice of bytes A between B and C, exclusive.",
      "logand": "Bitwise and of the atoms.",
      "logior": "Bitwise logical or of the atoms.",
      "logxor": "Bitwise xor of the atoms.",
      "lognot": "Bitwise not of A.",
      "ash": "Arithmetic shift A by B bits.",
      "lsh": "Logical shift A by B bits.",
      "pubkey_for_exp": "Map an exponent (secret key) to a G1 point (public key).",
      "g1_add": "Add two or more G1 points (public keys).",
      "g1_subtract": "Subtract one or more G1 points from a base G1 point.",
      "g1_multiply": "Multiply a G1 point (public key) by a scalar value.",
      "g1_negate": "Negate a G1 point (public key).",
      "g2_add": "Add two or more G2 points (signatures).",
      "g2_subtract": "Subtract one or more G2 points from a base G2 point.",
      "g2_multiply": "Multiply a G2 point (signature) by a scalar value.",
      "g2_negate": "Negate a G2 point (signature).",
      "g1_map": "Hash the data to a G1 point with sha256 and ExpandMsgXmd.",
      "g2_map": "Hash the data to a G2 point with sha256 and ExpandMsgXmd.",
      "bls_pairing_identity": "Return nil if pairing of all pairs is identity, otherwise raise exception.",
      "bls_verify": "Nil if signature g2 is valid with public key g1 and message, otherwise raise exception.",
      "sha256": "Calculate the sha256 hash of the atoms.",
      "keccak256": "Calculate the keccak256 hash of the atoms.",
      "coinid": "Validate inputs and calculate coin id with parent coin id, puzzle hash, and amount.",
      "secp256k1_verify": "Verify a signature that uses the secp256k1 curve.",
      "secp256r1_verify": "Verify a signature that uses the secp256r1 curve.",
      "softfork": "Enable ability to define new CLVM operators without creating a hard fork."
    }
  },
  "theme": {
    "name": "chialisp-dark",
    "base": "vs-dark",
    "inherit": true,
    "rules": [
      { "token": "comment", "foreground": "6A9955" },
      
      { "token": "number.hex", "foreground": "B5CEA8", "fontStyle": "bold" },
      { "token": "number.binary", "foreground": "B5CEA8", "fontStyle": "bold" },
      { "token": "number.float", "foreground": "B5CEA8" },
      { "token": "number.integer", "foreground": "B5CEA8" },
      
      { "token": "keyword.core", "foreground": "569CD6" },
      { "token": "keyword.modern", "foreground": "FF6B6B", "fontStyle": "bold" },
      { "token": "keyword.pragma", "foreground": "FF6B6B", "fontStyle": "italic" },
      { "token": "keyword.functional", "foreground": "A6E22E" },
      { "token": "keyword.operator", "foreground": "FD971F" },
      { "token": "keyword.list", "foreground": "E6DB74" },
      { "token": "keyword.crypto", "foreground": "AE81FF" },
      { "token": "keyword.control", "foreground": "C586C0" },
      
      { "token": "string", "foreground": "CE9178" },
      
      { "token": "identifier.predicate", "foreground": "9CDCFE", "fontStyle": "italic" },
      { "token": "identifier.mutator", "foreground": "9CDCFE", "fontStyle": "bold" },
      { "token": "identifier", "foreground": "9CDCFE" },
      { "token": "delimiter.parenthesis", "foreground": "FFD700" }
    ],
    "colors": {
      "editor.background": "#1e1e1e",
      "editor.foreground": "#cccccc",
      "editorLineNumber.foreground": "#858585",
      "editorLineNumber.activeForeground": "#c6c6c6",
      "editor.selectionBackground": "#264f78",
      "editor.inactiveSelectionBackground": "#3a3d41",
      "editorGutter.background": "#1e1e1e"
    }
  },
  "editorConfigs": {
    "main": {
      "language": "chialisp",
      "theme": "chialisp-dark",
      "automaticLayout": true,
      "lineNumbers": "on",
      "roundedSelection": false,
      "scrollBeyondLastLine": false,
      "readOnly": false,
      "minimap": { "enabled": true },
      "fontSize": 14,
      "fontFamily": "'Courier New', monospace",
      "lineHeight": 20,
      "letterSpacing": 0.5,
      "glyphMargin": true,
      "folding": true,
      "lineDecorationsWidth": 6,
      "lineNumbersMinChars": 3,
      "renderLineHighlight": "all",
      "hideCursorInOverviewRuler": false,
      "hover": { "enabled": true },
      "parameterHints": { "enabled": true },
      "suggest": {
        "showKeywords": true,
        "showSnippets": true,
        "showClasses": true,
        "showFunctions": true,
        "showVariables": true
      }
    },
    "output": {
      "language": "text",
      "theme": "vs-dark",
      "automaticLayout": true,
      "lineNumbers": "off",
      "roundedSelection": false,
      "scrollBeyondLastLine": false,
      "readOnly": true,
      "minimap": { "enabled": false },
      "fontSize": 13,
      "fontFamily": "'Consolas', 'Monaco', 'Courier New', monospace",
      "lineHeight": 18,
      "letterSpacing": 0,
      "folding": false,
      "glyphMargin": false,
      "lineDecorationsWidth": 0,
      "lineNumbersMinChars": 0,
      "renderLineHighlight": "none",
      "hideCursorInOverviewRuler": true,
      "overviewRulerLanes": 0,
      "scrollbar": {
        "vertical": "auto",
        "horizontal": "auto",
        "verticalScrollbarSize": 10,
        "horizontalScrollbarSize": 10,
        "arrowSize": 0
      },
      "wordWrap": "on",
      "contextmenu": true,
      "find": { "addExtraSpaceOnTop": false },
      "renderWhitespace": "none",
      "renderControlCharacters": false,
      "renderIndentGuides": false,
      "occurrencesHighlight": false,
      "selectionHighlight": true,
      "codeLens": false,
      "hover": { "enabled": false },
      "parameterHints": { "enabled": false },
      "suggest": {
        "showKeywords": false,
        "showSnippets": false,
        "showClasses": false,
        "showFunctions": false,
        "showVariables": false
      },
      "selectOnLineNumbers": true,
      "selectionClipboard": true,
      "copyWithSyntaxHighlighting": false
    }
  }
}